# Cloud Build configuration for Tide API
# Builds Docker image, pushes to Artifact Registry, and deploys to Cloud Run

steps:
  # Step 1: Build Docker image
  - name: "gcr.io/cloud-builders/docker"
    id: "build-image"
    args:
      - "build"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$COMMIT_SHA"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest"
      - "-t"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$SHORT_SHA"
      - "."

  # Step 2: Push Docker image to Artifact Registry
  - name: "gcr.io/cloud-builders/docker"
    id: "push-image"
    args:
      - "push"
      - "--all-tags"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}"
    waitFor:
      - "build-image"

  # Step 3: Deploy to Cloud Run
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    id: "deploy-cloudrun"
    entrypoint: gcloud
    args:
      - "run"
      - "deploy"
      - "${_SERVICE_NAME}"
      - "--image"
      - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$COMMIT_SHA"
      - "--region"
      - "${_REGION}"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--min-instances"
      - "0"
      - "--max-instances"
      - "10"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--timeout"
      - "60s"
      - "--concurrency"
      - "80"
      - "--set-env-vars"
      - "PORT=8080,DATA_DIR=/app/data,FES_DIR=/app/data/fes,TZ=Asia/Tokyo"
    waitFor:
      - "push-image"

  # Step 4: Wait for service to be ready
  - name: "gcr.io/cloud-builders/gcloud"
    id: "wait-for-service"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Waiting for service to be ready..."
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --project $PROJECT_ID \
          --format 'value(status.url)')

        echo "Service URL: $SERVICE_URL"

        for i in {1..30}; do
          if curl -f "$SERVICE_URL/healthz" > /dev/null 2>&1; then
            echo "Service is ready!"
            exit 0
          fi
          echo "Attempt $i/30 failed, waiting..."
          sleep 5
        done

        echo "Service failed to be ready within timeout"
        exit 1
    waitFor:
      - "deploy-cloudrun"

  # Step 5: Test health endpoint
  - name: "gcr.io/cloud-builders/curl"
    id: "test-health"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --project $PROJECT_ID \
          --format 'value(status.url)')

        echo "Testing health endpoint..."
        curl -v "$SERVICE_URL/healthz"
        echo ""
        curl -s "$SERVICE_URL/healthz" | jq .
    waitFor:
      - "wait-for-service"

  # Step 6: Test constituents endpoint
  - name: "gcr.io/cloud-builders/curl"
    id: "test-constituents"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --project $PROJECT_ID \
          --format 'value(status.url)')

        echo "Testing constituents endpoint..."
        curl -s "$SERVICE_URL/v1/constituents" | jq -r '.count' | xargs -I {} echo "Available constituents: {}"
    waitFor:
      - "test-health"

  # Step 7: Test predictions endpoint
  - name: "gcr.io/cloud-builders/curl"
    id: "test-predictions"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --project $PROJECT_ID \
          --format 'value(status.url)')

        echo "Testing CSV predictions endpoint..."
        curl -s "$SERVICE_URL/v1/tides/predictions?station_id=tokyo&start=2025-10-21T00:00:00Z&end=2025-10-21T03:00:00Z&interval=30m" | jq -r '.source, .predictions | length'

        echo "Testing FES predictions endpoint..."
        curl -s "$SERVICE_URL/v1/tides/predictions?lat=35.6762&lon=139.6503&start=2025-10-21T00:00:00Z&end=2025-10-21T03:00:00Z&interval=30m" | jq -r '.source, .predictions | length'
    waitFor:
      - "test-constituents"

  # Step 8: Deployment summary
  - name: "gcr.io/cloud-builders/gcloud"
    id: "deployment-summary"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        SERVICE_URL=$(gcloud run services describe ${_SERVICE_NAME} \
          --region ${_REGION} \
          --project $PROJECT_ID \
          --format 'value(status.url)')

        echo ""
        echo "=================================================="
        echo "âœ… Deployment Successful!"
        echo "=================================================="
        echo "Service: ${_SERVICE_NAME}"
        echo "Region: ${_REGION}"
        echo "URL: $SERVICE_URL"
        echo "Image: ${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$COMMIT_SHA"
        echo ""
        echo "Endpoints:"
        echo "  Health: $SERVICE_URL/healthz"
        echo "  Constituents: $SERVICE_URL/v1/constituents"
        echo "  Predictions: $SERVICE_URL/v1/tides/predictions"
        echo ""
        echo "Example queries:"
        echo "  curl '$SERVICE_URL/v1/tides/predictions?station_id=tokyo&start=2025-10-21T00:00:00Z&end=2025-10-21T12:00:00Z&interval=10m'"
        echo "  curl '$SERVICE_URL/v1/tides/predictions?lat=35.6762&lon=139.6503&start=2025-10-21T00:00:00Z&end=2025-10-21T12:00:00Z&interval=10m'"
        echo "=================================================="
    waitFor:
      - "test-predictions"

# Docker images to push to Artifact Registry
images:
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$COMMIT_SHA"
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:latest"
  - "${_REGION}-docker.pkg.dev/$PROJECT_ID/${_REPOSITORY}/${_SERVICE_NAME}:$SHORT_SHA"

# Build configuration
options:
  machineType: "E2_HIGHCPU_8"
  logging: CLOUD_LOGGING_ONLY
  dynamicSubstitutions: true

# Timeout for the entire build
timeout: "1200s" # 20 minutes

# Substitutions (can be overridden)
substitutions:
  _REGION: "asia-northeast1"
  _REPOSITORY: "cloud-run-source-deploy"
  _SERVICE_NAME: "tides-api"
