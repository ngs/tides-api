# golangci-lint configuration for Tide API
# Based on jplaw2epub-web-api linting standards

version: 2

run:
  timeout: 5m
  tests: true
  modules-download-mode: readonly

linters:
  enable:
    # Formatting and imports
    # (formatters configured separately in golangci-lint v2)

    # Code quality
    - govet
    - errcheck
    - staticcheck
    - unused
    - ineffassign

    # Security
    - gosec

    # Style and best practices
    - gocritic
    - revive
    - misspell
    - unparam
    - prealloc
    - unconvert
    - nakedret
    - noctx
    - gochecknoinits
    - gochecknoglobals
    - exhaustive
    - godot
    - nestif
    - copyloopvar

    # Additional for scientific computing
    - goconst
    - gocyclo
    - dupl

linters-settings:

  govet:
    enable:
      - shadow
    settings:
      printf:
        funcs:
          - (github.com/gin-gonic/gin.Context).JSON
          - (github.com/gin-gonic/gin.Context).String

  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (github.com/gin-gonic/gin.Context).Error

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - hugeParam  # Scientific computing often passes large structs

  revive:
    confidence: 0.8
    rules:
      - name: exported
        disabled: false
      - name: package-comments
        disabled: false
      - name: var-naming
        disabled: false
        arguments:
          - ["ID", "URL", "HTTP", "API", "CSV", "FES", "WIF", "MSL", "LAT", "LON"]

  misspell:
    locale: US
    ignore-words:
      - semidiurnal
      - diurnal
      - perigee
      - syzygy
      - amphidromic

  prealloc:
    simple: true
    range-loops: true
    for-loops: true

  godot:
    scope: all
    capital: true
    exclude:
      - "^FIXME:"
      - "^TODO:"

  nestif:
    min-complexity: 4

  gosec:
    excludes:
      - G104  # Errors unhandled (covered by errcheck)
      - G115  # Integer overflow conversion (we validate our inputs)
      - G304  # File path provided as taint input (we control paths)
      - G204  # Subprocess commands (controlled in build scripts)
      - G301  # Directory permissions (0755 is acceptable for data dirs)
      - G306  # File permissions (0644 is acceptable for test data)

  goconst:
    min-len: 3
    min-occurrences: 3
    ignore-tests: true

  gocyclo:
    min-complexity: 15

  dupl:
    threshold: 100

  nakedret:
    max-func-lines: 30

issues:
  # Exclude directories and files
  exclude-dirs:
    - vendor
    - testdata

  exclude-files:
    - ".*\\.gen\\.go$"
    - ".*_gen\\.go$"

  # Exclude specific rules for certain paths
  exclude-rules:
    # Test files
    - path: _test\.go
      linters:
        - gosec
        - gochecknoglobals
        - funlen
        - gocyclo
        - dupl
        - godot

    # Main entry points can have init() and globals
    - path: cmd/
      linters:
        - gochecknoinits
        - gochecknoglobals
        - nestif
        - revive
        - noctx
        - errcheck

    # Domain layer - constituents have global data
    - path: internal/domain/constituents\.go
      linters:
        - gochecknoglobals
        - gocritic

    # Domain layer - nodal correction has global data and scientific naming
    - path: internal/domain/nodal\.go
      linters:
        - gochecknoglobals
        - gocritic
        - nestif
        - exhaustive

    # Domain layer - nodal coefficients use scientific naming conventions
    - path: internal/domain/nodal_coeffs\.go
      linters:
        - gocritic

    # Domain layer - tide.go has enum exhaustive checks
    - path: internal/domain/tide\.go
      linters:
        - exhaustive

    # JMA package - has globals for timezone
    - path: internal/jma/
      linters:
        - gochecknoglobals
        - revive
        - errcheck

    # Use case layer - validation logic can be complex and uses globals for caching
    - path: internal/usecase/
      linters:
        - gocyclo
        - nestif
        - gochecknoglobals

    # CSV store adapter - simple loader
    - path: internal/adapter/store/csv/
      linters:
        - errcheck
        - revive

    # NetCDF adapter - may use CGO which has special considerations
    - path: internal/adapter/store/fes/
      linters:
        - gochecknoglobals
        - gocyclo
        - gocritic
        - revive
        - goconst
        - exhaustive
        - errcheck

    # Bathymetry adapter - NetCDF loading has necessary complexity
    - path: internal/adapter/store/bathymetry/
      linters:
        - gochecknoglobals
        - gocyclo
        - nestif
        - gocritic
        - revive
        - errcheck

    # Geoid adapter - NetCDF loading has necessary complexity
    - path: internal/adapter/geoid/
      linters:
        - gochecknoglobals
        - gocyclo
        - nestif
        - gocritic
        - revive
        - exhaustive
        - errcheck

    # HTTP handlers - gin.Context methods don't always need error checks
    - path: internal/http/
      text: "Error return value of.*gin.*is not checked"
      linters:
        - errcheck

    # Mathematical functions can be complex
    - path: internal/domain/tide\.go
      linters:
        - gocyclo
        - gocritic

    # Bilinear interpolation has necessary complexity
    - path: internal/adapter/interp/
      linters:
        - gocyclo
        - gocritic

    # Allow TODO/FIXME comments
    - linters:
        - godot
      text: "Comment should end in a period"
      source: "^\\s*(TODO|FIXME):"

    # Allow certain common false positives
    - text: "shadow: declaration of \"err\" shadows declaration"
      linters:
        - govet

    # G304: Allow file paths in specific contexts
    - path: internal/adapter/store/
      text: "G304:"
      linters:
        - gosec

    # Allow unhandled errors in main.go for startup logs
    - path: cmd/server/main\.go
      text: "G104:"
      linters:
        - gosec

  # Maximum issues count per one linter
  max-issues-per-linter: 50

  # Maximum count of issues with the same text
  max-same-issues: 3

  # Show only new issues
  new: false

  # Fix found issues (if supported by linter)
  fix: false

  # Uniq by line
  uniq-by-line: true

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  sort-results: true
