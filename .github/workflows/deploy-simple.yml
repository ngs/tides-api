name: Deploy (Simple - First Time Setup)

on:
  workflow_dispatch:
    inputs:
      deploy_method:
        description: "Deployment method"
        required: true
        default: "source"
        type: choice
        options:
          - source
          - artifact-registry

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  REGION: asia-northeast1
  SERVICE_NAME: tides-api
  REPOSITORY: cloud-run-source-deploy
  FES_DIR: /app/data/fes

jobs:
  deploy:
    name: Deploy to Cloud Run (Simple)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (WIF)
        id: auth-wif
        continue-on-error: true
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}

      - name: Authenticate to Google Cloud (Service Account Key - Fallback)
        id: auth-key
        if: steps.auth-wif.outcome == 'failure'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Enable required APIs
        run: |
          echo "Enabling required Google Cloud APIs..."
          gcloud services enable \
            cloudbuild.googleapis.com \
            run.googleapis.com \
            artifactregistry.googleapis.com \
            storage-api.googleapis.com \
            containerregistry.googleapis.com \
            iam.googleapis.com \
            iamcredentials.googleapis.com \
            cloudresourcemanager.googleapis.com \
            --project=${{ env.PROJECT_ID }}

          echo "Waiting for APIs to be fully enabled..."
          sleep 10

      - name: Create Artifact Registry repository (if not exists)
        continue-on-error: true
        run: |
          gcloud artifacts repositories describe ${{ env.REPOSITORY }} \
            --location=${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} 2>/dev/null || \
          gcloud artifacts repositories create ${{ env.REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.REGION }} \
            --description="Cloud Run source deployments for Tide API" \
            --project=${{ env.PROJECT_ID }}

      - name: Deploy (Source)
        if: github.event.inputs.deploy_method == 'source'
        run: |
          echo "Deploying from source..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --source . \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 10 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 60s \
            --concurrency 80 \
            --set-env-vars "PORT=8080,DATA_DIR=/app/data,FES_DIR=${{ env.FES_DIR }},TZ=Asia/Tokyo" \
            --project=${{ env.PROJECT_ID }}

      - name: Deploy (Artifact Registry)
        if: github.event.inputs.deploy_method == 'artifact-registry'
        run: |
          echo "Building and pushing Docker image..."
          gcloud builds submit \
            --tag ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --project=${{ env.PROJECT_ID }}

          echo "Deploying to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --min-instances 0 \
            --max-instances 10 \
            --memory 1Gi \
            --cpu 1 \
            --timeout 60s \
            --concurrency 80 \
            --set-env-vars "PORT=8080,DATA_DIR=/app/data,FES_DIR=${{ env.FES_DIR }},TZ=Asia/Tokyo" \
            --project=${{ env.PROJECT_ID }}

      - name: Allow public access
        run: |
          echo "Configuring public access..."
          gcloud run services add-iam-policy-binding ${{ env.SERVICE_NAME }} \
            --region=${{ env.REGION }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --project=${{ env.PROJECT_ID }}

      - name: Get service URL
        id: get-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --project=${{ env.PROJECT_ID }} \
            --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Service URL: $SERVICE_URL"

      - name: Wait for service to be ready
        run: |
          echo "Waiting for service to be ready..."
          for i in {1..30}; do
            if curl -f "${{ steps.get-url.outputs.url }}/healthz"; then
              echo "Service is ready!"
              exit 0
            fi
            echo "Attempt $i/30 failed, waiting..."
            sleep 5
          done
          echo "Service failed to be ready within timeout"
          exit 1

      - name: Test endpoints
        run: |
          SERVICE_URL="${{ steps.get-url.outputs.url }}"

          echo "Testing health endpoint..."
          curl -s "$SERVICE_URL/healthz" | jq .

          echo "Testing constituents endpoint..."
          curl -s "$SERVICE_URL/v1/constituents" | jq -r '.count' | xargs -I {} echo "Available constituents: {}"

          echo "Testing CSV predictions..."
          curl -s "$SERVICE_URL/v1/tides/predictions?station_id=tokyo&start=2025-10-21T00:00:00Z&end=2025-10-21T03:00:00Z&interval=30m" | jq -r '.source, .predictions | length'

          echo "Testing FES predictions..."
          curl -s "$SERVICE_URL/v1/tides/predictions?lat=35.6762&lon=139.6503&start=2025-10-21T00:00:00Z&end=2025-10-21T03:00:00Z&interval=30m" | jq -r '.source, .predictions | length'

      - name: Deployment summary
        run: |
          SERVICE_URL="${{ steps.get-url.outputs.url }}"

          echo ""
          echo "=================================================="
          echo "âœ… Deployment Successful!"
          echo "=================================================="
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Region: ${{ env.REGION }}"
          echo "URL: $SERVICE_URL"
          echo "Method: ${{ github.event.inputs.deploy_method }}"
          echo ""
          echo "Endpoints:"
          echo "  Health: $SERVICE_URL/healthz"
          echo "  Constituents: $SERVICE_URL/v1/constituents"
          echo "  Predictions: $SERVICE_URL/v1/tides/predictions"
          echo ""
          echo "Example queries:"
          echo "  curl '$SERVICE_URL/v1/tides/predictions?station_id=tokyo&start=2025-10-21T00:00:00Z&end=2025-10-21T12:00:00Z&interval=10m'"
          echo "  curl '$SERVICE_URL/v1/tides/predictions?lat=35.6762&lon=139.6503&start=2025-10-21T00:00:00Z&end=2025-10-21T12:00:00Z&interval=10m'"
          echo "=================================================="
          echo ""
          echo "Next steps:"
          echo "1. Set up Workload Identity Federation for better security:"
          echo "   ./scripts/gcp-setup.sh wif"
          echo "2. Configure GitHub secrets for automated deployments"
          echo "3. Use the 'Deploy to Cloud Run' workflow for subsequent deployments"
          echo "=================================================="
